package com;

public class Deadlock {
	

	public static void main(String[] args) {
		Shared s1= new Shared();
		Shared s2= new Shared();
		
		Thread t1=new Thread(new Thread1(s1,s2));
		t1.start();
		Thread t2=new Thread(new Thread2(s1,s2));
		t2.start();
	}

}
class Thread2 implements Runnable{
	private Shared s1;
	private Shared s2;
	
	public Thread2(Shared s1, Shared s2) {
		super();
		this.s1 = s1;
		this.s2 = s2;
	}

	@Override
	public void run() {
		s2.test2(s1);
	}
	
}
class Thread1 implements Runnable{
	private Shared s1;
	private Shared s2;
	
	public Thread1(Shared s1, Shared s2) {
		super();
		this.s1 = s1;
		this.s2 = s2;
	}

	@Override
	public void run() {
		s1.test1(s2);
	}
	
}

class Shared{
	synchronized void test1(Shared s) {
		try {
			System.out.println("test1 Start with"+Thread.currentThread().getName());
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	synchronized void test2(Shared s) {
		try {
			System.out.println("test2 Start with"+Thread.currentThread().getName());
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
